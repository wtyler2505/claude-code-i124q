{
  "permissions": {
    "allow": [
      "Bash",
      "Edit", 
      "MultiEdit",
      "Write",
      "Bash(cargo:*)",
      "Bash(rustc:*)",
      "Bash(rustup:*)",
      "Bash(clippy:*)",
      "Bash(rustfmt:*)",
      "Bash(rust-analyzer:*)",
      "Bash(gdb:*)",
      "Bash(lldb:*)",
      "Bash(valgrind:*)",
      "Bash(git:*)",
      "Bash(make:*)",
      "Bash(docker:*)",
      "Bash(cross:*)"
    ],
    "deny": [
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(rm -rf:*)"
    ],
    "defaultMode": "allowEdits"
  },
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": "180000",
    "BASH_MAX_OUTPUT_LENGTH": "25000",
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "1",
    "RUST_BACKTRACE": "1",
    "CARGO_TERM_COLOR": "always",
    "RUSTFLAGS": "-D warnings"
  },
  "includeCoAuthoredBy": true,
  "cleanupPeriodDays": 30,
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"\\(.tool_input.command) - \\(.tool_input.description // \"No description\")\"' >> ~/.claude/bash-command-log.txt"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo $STDIN_JSON | jq -r '.tool_input.file_path // \"\"); CONTENT=$(echo $STDIN_JSON | jq -r '.tool_input.content // \"\"); if [[ \"$FILE\" =~ \\.rs$ ]] && echo \"$CONTENT\" | grep -q 'println!'; then echo 'Warning: println! statements should be replaced with proper logging (log crate)' >&2; fi"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo $STDIN_JSON | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" == \"Cargo.toml\" ]] || [[ \"$FILE\" == \"Cargo.lock\" ]]; then echo 'Checking for vulnerable dependencies...'; if command -v cargo-audit >/dev/null 2>&1; then cargo audit; else echo 'cargo-audit not found. Install with: cargo install cargo-audit'; fi; fi",
            "timeout": 90
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo $STDIN_JSON | jq -r '.tool_input.file_path // \"\"'); CONTENT=$(echo $STDIN_JSON | jq -r '.tool_input.content // \"\"'); if [[ \"$FILE\" =~ \\.rs$ ]] && echo \"$CONTENT\" | grep -q 'unsafe'; then echo 'Warning: unsafe block detected. Ensure memory safety is maintained' >&2; fi"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command", 
            "command": "FILE=$(echo $STDIN_JSON | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" =~ \\.rs$ ]]; then rustfmt \"$FILE\" 2>/dev/null || echo 'rustfmt skipped (not installed)'; fi",
            "timeout": 30
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo $STDIN_JSON | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" =~ \\.rs$ ]]; then RESULT=$(cargo clippy --message-format=short 2>&1 | grep \"$FILE\"); if [ $? -eq 0 ] && command -v cargo >/dev/null 2>&1; then echo \"Clippy issues found: $RESULT\" >&2; fi; fi",
            "timeout": 45
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit", 
        "hooks": [
          {
            "type": "command",
            "command": "FILE=$(echo $STDIN_JSON | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" =~ \\.rs$ && \"$FILE\" != *\"test\"* ]]; then DIR=$(dirname \"$FILE\"); BASENAME=$(basename \"$FILE\" .rs); if [ -f \"$DIR/tests/${BASENAME}_test.rs\" ] || [ -d \"tests/\" ]; then echo \"Running tests for $FILE...\"; cargo test $(echo $BASENAME | sed 's/.*/\\u&/') --quiet; fi; fi",
            "timeout": 90
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"Claude Code notification: $(date)\" >> ~/.claude/notifications.log"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ -f Cargo.toml && $(git status --porcelain | grep '\\.rs$') ]]; then echo 'Running Clippy on changed Rust files...'; if command -v cargo >/dev/null 2>&1; then cargo clippy --all-targets --all-features -- -D warnings; else echo 'Cargo not found'; fi; fi",
            "timeout": 120
          }
        ]
      },
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command", 
            "command": "if [[ -f Cargo.toml && $(git status --porcelain | grep '\\.rs$') ]]; then echo 'Running security audit on dependencies...'; if command -v cargo-audit >/dev/null 2>&1; then cargo audit; else echo 'cargo-audit not found. Install with: cargo install cargo-audit'; fi; fi",
            "timeout": 90
          }
        ]
      }
    ]
  }
}